package com.example.myapplication;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PathMeasure;
import android.graphics.Shader;
import android.util.AttributeSet;
import android.view.View;

import androidx.annotation.Nullable;

// MyView myView = findViewById(R.id.MyView);
//        ObjectAnimator animator = ObjectAnimator.ofInt(myView, "Progress", 1, 100);
//        animator.setDuration(2000);
//        animator.start(); 调用方式
public class MyView extends View {

    private Paint paint1;
    private Paint paint2;
    private Paint paint3;

    private Paint paint6 = new Paint();

    private float[] pos=new float[2];
    private float[] tan=new float[2];
    PathMeasure mMeasure;
    Path path;
    int progress=0;

    public MyView(Context context) {
        super(context);
        init();
    }

    public MyView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        init();
    }


    public void init(){
      paint1 = new Paint(Paint.ANTI_ALIAS_FLAG);
      paint2 = new Paint();
      paint3 = new Paint();
      paint6=new Paint();
      paint1.setStyle(Paint.Style.STROKE);
      paint1.setStrokeWidth(5);
      paint1.setTextSize(60);

      paint2.set(paint1);
      paint2.setColor(Color.GRAY);

      paint3.set(paint2);
      paint3.setStrokeWidth(20);

      paint6.set(paint3);
      paint6.setColor(Color.RED);
      path = new Path();
      mMeasure = new PathMeasure();
      pos=new float[2];
      tan=new float[2];
        Shader shader = new LinearGradient(100, 100, 1000, 1000, Color.parseColor("#E91E63"),
                Color.parseColor("#2196F3"), Shader.TileMode.CLAMP);
        paint6.setShader(shader);
        paint1.setShader(shader);
  }

        //设置Sett gett方法 方便在外设置进度
    public int getProgress() {
        return progress;
    }
    public void setProgress(int progress) {
        this.progress=progress;
        invalidate();
    }


    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

//           wrap_content和match_parent效果一样,刚好满足需求所以就不具体去测量了
//        需要具体测量按自己需求来
        //啥也没写 所以不会受内边距影响(只跟View设置的宽度有关,半径固定是200),看你需求不多说
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }



    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        //这里我是直接根据当前View的大小来决定圆心在哪   如果你有需求跟据布局大小来改变圆的大小可重新设置;
        path.addCircle(getWidth() >> 1,getHeight()>>1,200, Path.Direction.CW);
        canvas.drawPath(path,paint3);
        canvas.drawArc((getWidth() >> 1)-200,(getHeight()>>1)-200,(getWidth() >> 1)+200,(getHeight()>>1)+200,0,progress*3.6f,false,paint6);
        canvas.drawText(progress+"%",(getWidth() >> 1)-60,(getHeight()>>1)+20,paint1);
        mMeasure.setPath(path,true);
        for(int i=1;i<=100;i++) {
            mMeasure.getPosTan(mMeasure.getLength()*(i*0.01f),pos,tan);
            float degrees = (float) (Math.atan2(tan[1], tan[0]) * 180.0 / Math.PI);
            canvas.save();
            canvas.rotate(degrees+90,pos[0],pos[1]);
            canvas.drawLine(pos[0]-20 , pos[1], pos[0] - 60, pos[1], paint2);
            canvas.restore();
        }
        for (int i=1;i<=progress;i++){
            mMeasure.getPosTan(mMeasure.getLength()*(i*0.01f),pos,tan);
            float degrees = (float) (Math.atan2(tan[1], tan[0]) * 180.0 / Math.PI);
            canvas.save();
            canvas.rotate(degrees+90,pos[0],pos[1]);
            canvas.drawLine(pos[0]-20 , pos[1], pos[0] - 60, pos[1], paint1);
            canvas.restore();
        }
        path.reset();
    }
}
